-- 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ:

	-- –°—Ç–≤–æ—Ä—ñ—Ç—å —Å—Ö–µ–º—É pandemic —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é SQL-–∫–æ–º–∞–Ω–¥–∏.
DROP SCHEMA IF EXISTS pandemic;
CREATE SCHEMA pandemic;
	-- –û–±–µ—Ä—ñ—Ç—å —ó—ó —è–∫ —Å—Ö–µ–º—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é SQL-–∫–æ–º–∞–Ω–¥–∏.
USE pandemic;
	-- –Ü–º–ø–æ—Ä—Ç—É–π—Ç–µ –¥–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Import wizard —Ç–∞–∫, —è–∫ –≤–∏ –≤–∂–µ —Ä–æ–±–∏–ª–∏ —Ü–µ —É —Ç–µ–º—ñ 3.
	-- infectious_cases.csv

-- –ü—Ä–æ–¥–∏–≤—ñ—Ç—å—Å—è –¥–∞–Ω—ñ, —â–æ–± –±—É—Ç–∏ —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ.
SELECT * FROM infectious_cases;



-- 2. –ù–æ—Ä–º–∞–ª—ñ–∑—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—é infectious_cases –¥–æ 3—ó –Ω–æ—Ä–º–∞–ª—å–Ω–æ—ó —Ñ–æ—Ä–º–∏. –ó–±–µ—Ä–µ–∂—ñ—Ç—å —É —Ü—ñ–π –∂–µ —Å—Ö–µ–º—ñ –¥–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ –∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.
DROP TABLE IF EXISTS entities;
CREATE TABLE entities (
	id INT AUTO_INCREMENT PRIMARY KEY, 
	entity_name VARCHAR(100),
    entity_code VARCHAR(10));
    
INSERT entities (entity_name, entity_code)
SELECT DISTINCT Entity, Code FROM infectious_cases;

SELECT * FROM entities;

DROP TABLE IF EXISTS infectious_cases_norm;
CREATE TABLE infectious_cases_norm (
	id INT AUTO_INCREMENT PRIMARY KEY, 
	Entity VARCHAR(100),
    Code VARCHAR(10),
    Year YEAR,
    Number_yaws INT,
    polio_cases INT,
    cases_guinea_worm INT,
    Number_rabies FLOAT,
    Number_malaria FLOAT,
    Number_hiv FLOAT,
    Number_tuberculosis FLOAT,
    Number_smallpox FLOAT,
    Number_cholera_cases FLOAT, 
    entity_id INT);

INSERT infectious_cases_norm (
Entity, Code, Year, Number_yaws, polio_cases, cases_guinea_worm, Number_rabies, Number_malaria, Number_hiv, Number_tuberculosis, Number_smallpox, Number_cholera_cases, entity_id)
SELECT infectious_cases.*, entities.id 
FROM infectious_cases
LEFT JOIN entities ON infectious_cases.Entity = entities.entity_name;

ALTER TABLE infectious_cases_norm
DROP COLUMN Entity, 
DROP COLUMN Code; 
        
SELECT * FROM infectious_cases_norm;

-- 3. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –¥–∞–Ω—ñ:

	-- –î–ª—è –∫–æ–∂–Ω–æ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó Entity —Ç–∞ Code –∞–±–æ —ó—Ö id –ø–æ—Ä–∞—Ö—É–π—Ç–µ —Å–µ—Ä–µ–¥–Ω—î, –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ —Å—É–º—É –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ Number_rabies.
		-- üí° –í—Ä–∞—Ö—É–π—Ç–µ, —â–æ –∞—Ç—Ä–∏–±—É—Ç Number_rabies –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äò‚Äô ‚Äî –≤–∞–º –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —ó—Ö –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏.
	-- –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –∑–∞ –ø–æ—Ä–∞—Ö–æ–≤–∞–Ω–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º –∑–Ω–∞—á–µ–Ω–Ω—è–º —É –ø–æ—Ä—è–¥–∫—É —Å–ø–∞–¥–∞–Ω–Ω—è.
	-- –û–±–µ—Ä—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ 10 —Ä—è–¥–∫—ñ–≤ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ –µ–∫—Ä–∞–Ω.
    
SELECT 
	entity_id,
	AVG(Number_rabies) AS avg,
	MIN(Number_rabies) AS min,
	MAX(Number_rabies) AS max,
    SUM(Number_rabies) AS sum
FROM infectious_cases_norm
WHERE Number_rabies IS NOT NULL
GROUP BY entity_id
ORDER BY avg DESC
LIMIT 10;

-- 4. –ü–æ–±—É–¥—É–π—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Ä—ñ–∑–Ω–∏—Ü—ñ –≤ —Ä–æ–∫–∞—Ö.
	-- –î–ª—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó –∞–±–æ –Ω–æ—Ä–º–æ–≤–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ Year –ø–æ–±—É–¥—É–π—Ç–µ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö SQL-—Ñ—É–Ω–∫—Ü—ñ–π:
		-- –∞—Ç—Ä–∏–±—É—Ç, —â–æ —Å—Ç–≤–æ—Ä—é—î –¥–∞—Ç—É –ø–µ—Ä—à–æ–≥–æ —Å—ñ—á–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä–æ–∫—É,
			-- üí° –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –∞—Ç—Ä–∏–±—É—Ç –º—ñ—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äô1996‚Äô, —Ç–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –º–∞—î –±—É—Ç–∏ ‚Äò1996-01-01‚Äô.
		-- –∞—Ç—Ä–∏–±—É—Ç, —â–æ –¥–æ—Ä—ñ–≤–Ω—é—î –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∞—Ç—ñ,
		-- –∞—Ç—Ä–∏–±—É—Ç, —â–æ –¥–æ—Ä—ñ–≤–Ω—é—î —Ä—ñ–∑–Ω–∏—Ü—ñ –≤ —Ä–æ–∫–∞—Ö –¥–≤–æ—Ö –≤–∏—â–µ–∑–≥–∞–¥–∞–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫.
			-- üí° –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ –∞—Ç—Ä–∏–±—É—Ç–∏, —Ç–∞–∫—ñ —è–∫ Number_malaria, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.

SELECT 
	id, 
	Year, 
    MAKEDATE(Year, 1) AS first_january, 
    CURDATE() AS current_data, 
    TIMESTAMPDIFF(YEAR, MAKEDATE(Year, 1), CURDATE()) AS diff_year  
FROM infectious_cases_norm;

-- 5. –ü–æ–±—É–¥—É–π—Ç–µ –≤–ª–∞—Å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é.
	-- –°—Ç–≤–æ—Ä—ñ—Ç—å —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –±—É–¥—É—î —Ç–∞–∫–∏–π –∂–µ –∞—Ç—Ä–∏–±—É—Ç, —è–∫ —ñ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ: 
	-- —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –ø—Ä–∏–π–º–∞—Ç–∏ –Ω–∞ –≤—Ö—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∫—É, –∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é –≤ —Ä–æ–∫–∞—Ö –º—ñ–∂ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ –¥–∞—Ç–æ—é, —Å—Ç–≤–æ—Ä–µ–Ω–æ—é –∑ –∞—Ç—Ä–∏–±—É—Ç–∞ —Ä–æ–∫—É (1996 —Ä—ñ–∫ ‚Üí ‚Äò1996-01-01‚Äô).
    
DROP FUNCTION IF EXISTS YearDiff;

DELIMITER //

CREATE FUNCTION YearDiff(year YEAR)
RETURNS INT 
NO SQL
BEGIN
	 RETURN TIMESTAMPDIFF(YEAR, MAKEDATE(Year, 1), CURDATE());
END//

DELIMITER ;

SELECT id, Year, YearDiff(Year) FROM infectious_cases_norm;

		-- üí° –Ø–∫—â–æ –≤–∏ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é ‚Äî —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ —Ä–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å –∑–∞ –ø–µ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥. 
-- –î–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–±–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å –Ω–∞ —Ä—ñ–∫ –Ω–∞ –ø–µ–≤–Ω–µ —á–∏—Å–ª–æ: 12 ‚Äî –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å –Ω–∞ –º—ñ—Å—è—Ü—å, 4 ‚Äî –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª –∞–±–æ 2 ‚Äî –Ω–∞ –ø—ñ–≤—Ä—ñ—á—á—è. 
-- –¢–∞–∫–∏–º —á–∏–Ω–æ–º, —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å –Ω–∞ —Ä—ñ–∫ —Ç–∞ –¥–æ–≤—ñ–ª—å–Ω–∏–π –¥—ñ–ª—å–Ω–∏–∫. –í–∏ —Ç–∞–∫–æ–∂ –º–∞—î—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ó—ó ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞ –¥–∞–Ω–∏—Ö. 
-- –û—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤—Å—ñ —Ä—è–¥–∫–∏ –º—ñ—Å—Ç—è—Ç—å —á–∏—Å–ª–æ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å, –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –±—É–¥–µ –≤—ñ–¥—Å—ñ—è—Ç–∏ —Ç—ñ, —â–æ –Ω–µ –º–∞—é—Ç—å —á–∏—Å–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è (‚â† ‚Äò‚Äô).

DROP FUNCTION IF EXISTS DividingTwoNumbers;

DELIMITER //

CREATE FUNCTION DividingTwoNumbers(divided FLOAT, divisor FLOAT)
RETURNS FLOAT 
DETERMINISTIC
NO SQL
BEGIN
	IF divisor = 0 THEN  
		RETURN NULL;
	ELSE 
		RETURN divided/divisor;
	END IF;
END//

DELIMITER ;

SELECT Year, Number_malaria, DividingTwoNumbers(Number_malaria, 12) AS number_malaria_by_month 
FROM infectious_cases_norm
WHERE Number_malaria IS NOT NULL;